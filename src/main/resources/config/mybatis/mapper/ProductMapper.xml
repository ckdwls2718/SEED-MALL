<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.product.mapper.ProductMapper">

	<insert id="productInsert" parameterType="ProductF"
		useGeneratedKeys="true" keyProperty="pidx">

		insert into product(pidx,upCg_code,downCg_code,pname,price,
		psaleprice,pqty,ppoint,pspec,sun,temp,soil,pcontent,pdate,preadnum,plikenum)
		values(product_seq.nextval,#{upCg_code},#{downCg_code},#{pname},
		#{price},#{psaleprice},#{pqty},#{ppoint},#{pspec},#{sun:VARCHAR},#{temp:VARCHAR},#{soil:VARCHAR},
		#{pcontent:VARCHAR},sysdate,#{preadnum},#{plikenum})

		<selectKey keyProperty="pidx" resultType="int" order="AFTER">
			select
			product_seq.currval from dual
		</selectKey>
	</insert>

	<insert id="insertPimage" parameterType="ProductI">
		insert into
		product_image(image_pidx, pidx, pthumbnail, pimage, pOriginFilename)
		values(product_image_seq.nextval,
		#{pidx},#{pthumbnail:VARCHAR},#{pimage},#{pOriginFilename})
	</insert>


	<select id="getProducts" resultType="Product" parameterType="ProdPaging">
		<include refid="selectProd"/>
		<include refid="findProdWhere"/>
		<include refid="prodSort"/>
	</select>

	<select id="getProdImages" resultType="ProductI"
		parameterType="_int">
		select *
		from product_image
		where pidx=#{value}
		order by 1
		asc
	</select>

	<select id="selectByPspec" resultType="Product"
		parameterType="string">
		<include refid="selectProd" />
		where pspec=#{value}
	</select>

	<select id="selectByPidx" resultType="Product"
		parameterType="_int">
		<include refid="selectProd" />
		where pidx=#{value}
	</select>

	<delete id="deleteProduct" parameterType="_int">
		{call
		declare
		begin
		delete from product_image where pidx=#{value};
		delete from product
		where pidx=#{value};
		end
		}
	</delete>

	<delete id="deleteImage" parameterType="_int">
		delete from product_image where pidx=#{value}
	</delete>

	<update id="updateProduct" parameterType="ProductF">

		UPDATE product

		SET
		upCg_code=#{upCg_code},downCg_code=#{downCg_code},pname=#{pname},price=#{price},
		psaleprice=#{psaleprice},pqty=#{pqty},ppoint=#{ppoint},pspec=#{pspec},
		sun=#{sun},temp=#{temp},soil=#{soil},pcontent=#{pcontent}
		WHERE pidx
		=#{pidx}

	</update>

	<sql id="selectProd">
		select p.*,decode(c.upcg_code,1,'초보',2,'중급',3,'전문가')
		upcg_name,c.downCg_name
		from product p join downcategory c
		on
		p.downCg_code = c.downCg_code and p.upCg_code =c.upCg_code
	</sql>
	
	<sql id="findProdWhere">
		<if test="upcg!=null and upcg!=''">
			<where>
				p.upcg_code = #{upcg}
			</where>
		</if>
		<if test="downcg!=null and downcg!=''">
			and p.downcg_code = #{downcg}
		</if>
		<if test="findKeyword!=null and findKeyword!=''">
			<where>
				p.pname like '%'||#{findKeyword}||'%'
			</where>
		</if>
	</sql>
	
	<sql id="prodSort">
		<if test="sort!=null and sort!=''">
			<if test="sort==1">
				order by pidx desc
			</if>
			<if test="sort==2">
				order by plikenum desc, pidx desc
			</if>
			<if test="sort==3">
				order by price desc, pidx desc
			</if>
			<if test="sort==4">
				order by price asc, pidx desc
			</if>
		</if>
	</sql>
</mapper>













